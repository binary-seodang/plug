schema {
  query: Query
  mutation: Mutation
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  nickname: String!
  role: UserRole
  sessionId: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum UserRole {
  Admin
  Client
}

type LoginOutput {
  error: String
  ok: Boolean!
  token: String
  user: User
}

type UserProfileOutput {
  error: String
  ok: Boolean!
  user: User
}

type ViduSession {
  sessionId: String!
  createdAt: TimeStamp!
}

"""TimeStamp Test Scalar"""
scalar TimeStamp

type ViduSessionOutput {
  error: String
  ok: Boolean!
  session: ViduSession
}

type ViduTokenOutput {
  error: String
  ok: Boolean!
  token: String
}

type Query {
  getUser(id: Float!): UserProfileOutput!
  getMe: UserProfileOutput!
  getSession(sessionId: String!): ViduSessionOutput!
  getToken(sessionId: String!): ViduTokenOutput!
}

type Mutation {
  login(input: LoginInput!): LoginOutput!
}

input LoginInput {
  nickname: String!
}